"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkshopify_base_2_0"] = self["webpackChunkshopify_base_2_0"] || []).push([["section-bf"],{

/***/ "./src/modules/bf/bf.js":
/*!******************************!*\
  !*** ./src/modules/bf/bf.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bf_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bf.css */ \"./src/modules/bf/bf.css\");\n/* eslint-disable */\n\nconsole.log('bf.js loaded');\ndocument.addEventListener('DOMContentLoaded', function () {\n  //Select parent section\n  const parentSection = document.querySelectorAll('.section-explore');\n  parentSection.forEach(section => {\n    // Product cards hover logic\n    const productCards = section.querySelectorAll('.section-explore__product');\n    const desktopLabel = section.querySelector('.section-explore__collection-label-desktop');\n    const travelLabel = section.querySelector('.section-explore__collection-label-travel');\n    let activeProduct = null;\n    let activeCard = null;\n    const initialProduct = section.querySelector('.section-explore__product-content [data-product=\"for-desktop-1\"]');\n    if (initialProduct) {\n      initialProduct.style.opacity = '1';\n      initialProduct.style.transition = 'opacity 0.5s ease';\n      if (desktopLabel) {\n        desktopLabel.classList.add('active');\n      }\n      const initialLines = initialProduct.querySelectorAll('.animate-line');\n      initialLines.forEach(line => line.classList.add('active-line'));\n      activeProduct = initialProduct;\n      const firstCard = section.querySelector('.section-explore__product[data-product-hover=\"for-desktop-1\"]');\n      if (firstCard) {\n        firstCard.classList.add('active');\n        activeCard = firstCard;\n      }\n    }\n    productCards.forEach(card => {\n      card.addEventListener('mouseenter', () => {\n        const productIndex = card.getAttribute('data-product-hover');\n        if (productIndex.startsWith('for-desktop')) {\n          if (desktopLabel) desktopLabel.classList.add('active');\n          if (travelLabel) travelLabel.classList.remove('active');\n        } else if (productIndex.startsWith('for-travel')) {\n          if (travelLabel) travelLabel.classList.add('active');\n          if (desktopLabel) desktopLabel.classList.remove('active');\n        }\n        if (activeProduct) {\n          activeProduct.style.opacity = '0';\n          const activeLines = activeProduct.querySelectorAll('.animate-line');\n          activeLines.forEach(line => line.classList.remove('active-line'));\n        }\n        const targetContent = section.querySelector(`.section-explore__product-content [data-product=\"${productIndex}\"]`);\n        if (targetContent) {\n          targetContent.style.opacity = '1';\n          targetContent.style.transition = 'opacity 0.5s ease';\n          const targetLines = targetContent.querySelectorAll('.animate-line');\n          targetLines.forEach(line => line.classList.add('active-line'));\n          activeProduct = targetContent;\n        }\n        if (activeCard) {\n          activeCard.classList.remove('active');\n        }\n        card.classList.add('active');\n        activeCard = card;\n      });\n    });\n\n    // Popup toggle logic\n    const buyNowButtons = section.querySelectorAll('.js-section-explore__buy-now');\n    const popups = section.querySelectorAll('.buy-now-popup');\n    function openPopup(popup) {\n      popup.style.display = 'block';\n      popup.classList.add('active');\n      document.querySelector('body').style.overflow = 'hidden';\n    }\n    function closePopup(popup) {\n      popup.style.display = 'none';\n      popup.classList.remove('active');\n      document.querySelector('body').style.overflow = 'auto';\n    }\n\n    // Function to update the state of the minus button based on quantity\n    function updateQuantityButtonsState(input, minusButton) {\n      const quantity = parseInt(input.value);\n      if (quantity <= 1) {\n        minusButton.setAttribute(\"disabled\", true);\n        minusButton.classList.add('disabled');\n      } else {\n        minusButton.removeAttribute(\"disabled\");\n        minusButton.classList.remove('disabled');\n      }\n    }\n\n    // Reset quantity button event listeners\n    function resetQuantityListeners() {\n      const quantityMinusButtons = section.querySelectorAll('.buy-now-popup__quantity button[name=\"minus\"]');\n      const quantityPlusButtons = section.querySelectorAll('.buy-now-popup__quantity button[name=\"plus\"]');\n      quantityMinusButtons.forEach(button => {\n        const newButton = button.cloneNode(true);\n        button.parentNode.replaceChild(newButton, button);\n      });\n      quantityPlusButtons.forEach(button => {\n        const newButton = button.cloneNode(true);\n        button.parentNode.replaceChild(newButton, button);\n      });\n    }\n\n    // Handling Buy Now button clicks\n    buyNowButtons.forEach((button, index) => {\n      button.addEventListener('click', () => {\n        const popup = button.parentNode.querySelector('.buy-now-popup');\n        if (popup) {\n          openPopup(popup);\n          resetQuantityListeners();\n\n          // Add quantity control logic\n          const quantityInputs = popup.querySelectorAll('.buy-now-popup__quantity input[type=\"number\"]');\n          const quantityMinusButtons = popup.querySelectorAll('.buy-now-popup__quantity button[name=\"minus\"]');\n          const quantityPlusButtons = popup.querySelectorAll('.buy-now-popup__quantity button[name=\"plus\"]');\n          quantityInputs.forEach((input, idx) => {\n            const minusButton = quantityMinusButtons[idx];\n            const plusButton = quantityPlusButtons[idx];\n\n            // Initially check if the minus button should be disabled\n            updateQuantityButtonsState(input, minusButton);\n            minusButton.addEventListener('click', () => {\n              let quantity = parseInt(input.value);\n              if (quantity > 1) {\n                input.value = quantity - 1;\n                const addToCartButton = popup.querySelector('.js-atc-bf');\n                const addToCheckoutButton = popup.querySelector('.js-checkout');\n                addToCartButton.setAttribute(\"data-quantity\", input.value);\n                addToCheckoutButton.setAttribute(\"data-quantity\", input.value);\n              }\n              updateQuantityButtonsState(input, minusButton); // Update button state after quantity change\n            });\n\n            plusButton.addEventListener('click', () => {\n              let quantity = parseInt(input.value);\n              input.value = quantity + 1;\n              const addToCartButton = popup.querySelector('.js-atc-bf');\n              const addToCheckoutButton = popup.querySelector('.js-checkout');\n              addToCartButton.setAttribute(\"data-quantity\", input.value);\n              addToCheckoutButton.setAttribute(\"data-quantity\", input.value);\n              updateQuantityButtonsState(input, minusButton); // Update button state after quantity change\n            });\n          });\n\n          // Expand description logic\n          const learnMoreButton = popup.querySelector('.buy-now-popup__expand-desc');\n          const descriptionEl = popup.querySelector('.buy-now-popup__description');\n          const descriptionInner = popup.querySelector('.buy-now-popup__description-inner');\n          if (learnMoreButton) {\n            const clonedLearnMoreButton = learnMoreButton.cloneNode(true);\n            learnMoreButton.parentNode.replaceChild(clonedLearnMoreButton, learnMoreButton);\n            clonedLearnMoreButton.addEventListener('click', () => {\n              const expanded = descriptionEl.classList.contains('expanded');\n              if (expanded) {\n                descriptionEl.classList.remove('expanded');\n                descriptionInner.style.height = '100px';\n                clonedLearnMoreButton.querySelector('span').textContent = 'Learn More';\n                descriptionInner.classList.add('with-gradient');\n              } else {\n                descriptionEl.classList.add('expanded');\n                descriptionInner.style.height = `${descriptionInner.scrollHeight}px`;\n                clonedLearnMoreButton.querySelector('span').textContent = 'Show Less';\n                descriptionInner.classList.remove('with-gradient');\n              }\n            });\n          }\n\n          // Upsell checkbox toggle logic\n          const upsellBoxes = popup.querySelectorAll('.buy-now-popup__upsell-box');\n          upsellBoxes.forEach(box => {\n            const checkbox = box.querySelector('input[type=\"checkbox\"]');\n            box.addEventListener('click', () => {\n              checkbox.checked = !checkbox.checked;\n              if (checkbox.checked) {\n                box.classList.add('active');\n              } else {\n                box.classList.remove('active');\n              }\n            });\n          });\n        }\n      });\n    });\n\n    // Add click event listener to close icons\n    popups.forEach(popup => {\n      const closeButtons = popup.querySelectorAll('.close-buy-now-popup');\n      closeButtons.forEach(button => {\n        button.addEventListener('click', () => {\n          closePopup(popup);\n        });\n      });\n    });\n    function updatePlaceholders() {\n      fetch('/cart.js').then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(cart => {\n        // Example: Display cart items in a div\n        document.querySelector('body').style.overflow = 'auto';\n        const output = document.querySelector('.js-output');\n        const item_count = cart.item_count;\n        const placeholders = document.querySelectorAll('.placeholder');\n        const cartItems = cart.items;\n        placeholders.forEach(placeholder => {\n          placeholder.classList.remove('filled');\n          placeholder.innerHTML = '+';\n        });\n        const giftSelectorsActive = document.querySelectorAll(`.padlock-active[data-gift]`);\n        const cartTotal = cart.total_price;\n        if (giftSelectorsActive) {\n          giftSelectorsActive.forEach(gift => {\n            gift.classList.remove('is-active');\n            gift.querySelector('.gift-overlay').classList.remove('is-active');\n            gift.querySelector('.top-note').classList.remove('is-active');\n            if (gift.querySelector('.conf')) {\n              gift.querySelector('.conf').classList.remove('is-active');\n            }\n            let giftNumber = gift.getAttribute('data-money');\n            if (cartTotal >= giftNumber) {\n              gift.classList.add('is-active');\n              gift.querySelector('.gift-overlay').classList.add('is-active');\n              gift.querySelector('.top-note').classList.add('is-active');\n              if (gift.querySelector('.conf')) {\n                gift.querySelector('.conf').classList.add('is-active');\n              }\n            }\n          });\n        }\n        // Fill placeholders with cart items\n        cartItems.forEach((item, index) => {\n          if (index < placeholders.length) {\n            placeholders[index].innerHTML = `\n                                <img src=\"${item.image}\" alt=\"${item.title}\" class=\"w-full h-full object-cover\">\n                                <div class=\"absolute bg-black flex items-center justify-center w-[30%] h-[30%] bottom-[5px] right-[5px]\">\n                                    <p class=\"text-white text-center\">${item.quantity}</p>\n                                </div>\n                                <div data-id=\"${item.id}\" class=\"absolute bg-[#c14444] flex items-center justify-center w-[16px] h-[16px] top-[-8px] right-[-8px] js-remove-product cursor-pointer color-white rounded-[50%]\">\n                                    x\n                                </div>\n                            `;\n          } else {\n            document.querySelector('.js-output').innerHTML += `\n                            <div class=\"sticky-card-product w-[50px] h-[50px] bg-white flex items-center justify-center placeholder relative\">\n                                <img src=\"${item.image}\" alt=\"${item.title}\" class=\"w-full h-full object-cover\">\n                                <div class=\"absolute bg-black flex items-center justify-center w-[30%] h-[30%] bottom-[5px] right-[5px]\">\n                                    <p class=\"text-white text-center\">${item.quantity}</p>\n                                </div>\n                                <div data-id=\"${item.id}\" class=\"absolute bg-[#c14444] flex items-center justify-center w-[16px] h-[16px] top-[-8px] right-[-8px] js-remove-product cursor-pointer color-white rounded-[50%]\">\n                                    x\n                                </div>\n                            </div>\n                            `;\n          }\n        });\n      }).catch(error => {\n        console.error('Error fetching cart:', error);\n      });\n      console.log('done updating placeholders');\n    }\n    function initializeTrackingBar() {\n      const messageContainer = document.querySelector('[data-tracking-bar-message]');\n      const progressBar = document.querySelector('[data-progress-bar]');\n      const blocks = Array.from(document.querySelectorAll('[data-tracking-bar-blocks] li')).map(block => ({\n        itemCount: parseInt(block.getAttribute('data-item-count'), 10),\n        percentageOff: parseInt(block.getAttribute('data-percentage-off'), 10)\n      }));\n      let cartItemCount = 0;\n      function updateTrackingBar() {\n        let currentBlock = null;\n        let nextBlock = null;\n\n        // Determine the current and next discount blocks\n        for (let i = 0; i < blocks.length; i++) {\n          if (cartItemCount >= blocks[i].itemCount) {\n            currentBlock = blocks[i];\n          } else {\n            nextBlock = blocks[i];\n            break;\n          }\n        }\n\n        // Update message and progress bar\n        if (!currentBlock) {\n          // Before the first block\n          const itemsLeft = blocks[0].itemCount - cartItemCount;\n          messageContainer.textContent = `Add ${itemsLeft} more items to save ${blocks[0].percentageOff}%.`;\n          // const progress = (cartItemCount / blocks[0].itemCount) * 100;\n          // progressBar.style.width = `${progress}%`;\n        } else if (!nextBlock) {\n          // Maximum discount reached\n          messageContainer.textContent = `You are at your maximum discount of ${currentBlock.percentageOff}%.`;\n          // progressBar.style.width = '100%';\n        } else {\n          // Between blocks\n          const itemsLeft = nextBlock.itemCount - cartItemCount;\n          messageContainer.textContent = `You get ${currentBlock.percentageOff}% off. Add ${itemsLeft} more items to get ${nextBlock.percentageOff}% off.`;\n          const progress = (cartItemCount - currentBlock.itemCount) / (nextBlock.itemCount - currentBlock.itemCount) * 100;\n          // progressBar.style.width = `${progress}%`;\n        }\n\n        const maxItems = blocks[blocks.length - 1].itemCount;\n        const progress = Math.min(cartItemCount / maxItems * 100, 100); // Cap at 100%\n        progressBar.style.width = `${progress}%`;\n      }\n      function fetchCartCount() {\n        fetch('/cart.js').then(response => response.json()).then(cart => {\n          let cartItemCountMinus = 0;\n          cart.items.forEach(item => {\n            if (item.properties._attribution) {\n              cartItemCountMinus += item.quantity;\n            }\n          });\n          cartItemCount = cart.item_count - cartItemCountMinus;\n          document.querySelector('.js-gift-unlocked').innerHTML = cartItemCountMinus + 1;\n          updateTrackingBar();\n        }).catch(error => console.error('Error fetching cart data:', error));\n      }\n\n      // Initial setup\n      fetchCartCount();\n    }\n    function getCartItemCount() {\n      fetch('/cart.js').then(response => response.json()).then(cart => {\n        let itemsCount = 0;\n        cart.items.forEach(item => {\n          if (item.properties._attribution) {\n            itemsCount += item.quantity;\n          }\n        });\n\n        // Use this value to update your tracking bar or any other UI elements\n        initializeTrackingBar(8888888); // Example: Hook into your tracking bar logic\n      }).catch(error => {\n        console.error('Error fetching cart data:', error);\n      });\n    }\n    window.addEventListener('load', getCartItemCount);\n    window.addEventListener('load', updatePlaceholders);\n    document.addEventListener('rebuy:cart.change', event => {\n      updatePlaceholders();\n      getCartItemCount();\n    });\n    function removeProduct(productId) {\n      fetch(window.Shopify.routes.root + 'cart/change.js', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: productId,\n          quantity: 0\n        })\n      }).then(response => {\n        if (response.status === 200) {\n          updatePlaceholders();\n          getCartItemCount();\n        }\n        return response.json();\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n    let removeProductButtons = document.querySelectorAll('.js-remove-product');\n    document.addEventListener('click', function (event) {\n      if (event.target && event.target.matches('.js-remove-product')) {\n        var dataId = event.target.getAttribute('data-id'); // Retrieve the data-id attribute\n        removeProduct(dataId);\n      }\n    });\n\n    // Add to cart logic\n    let addToCarts = section.querySelectorAll(\".js-atc-bf\"); // Select all add to cart buttons\n    addToCarts.forEach(addToCart => {\n      addToCart.addEventListener(\"click\", e => {\n        document.querySelector('body').style.overflow = 'auto';\n        $('html').addClass('hide-drawer');\n        let checkout = false;\n        if (addToCart.classList.contains('js-checkout')) {\n          // Check if the button is checkout\n          checkout = true;\n        }\n        let _this = e.target;\n        let productId = _this.getAttribute(\"data-product-id\"); // Get the product id\n        let quantity = _this.getAttribute(\"data-quantity\"); // Get the quantity\n        const upsellProductSelectors = section.querySelectorAll(\".js-upsell-selector.active\"); // Get all active upsell products\n        const addItems = []; // Create an array for items\n        addItems.push({\n          // Add the main product to the array\n          id: productId,\n          quantity: quantity\n        });\n        upsellProductSelectors.forEach(upsellProductSelector => {\n          // Add upsell products to the array\n          const productId = upsellProductSelector.getAttribute(\"data-product-id\");\n          addItems.push({\n            id: productId,\n            quantity: 1\n          });\n        });\n        console.log(addItems, 'addItems');\n        const formData = {\n          // Form data for the cart\n          items: addItems\n        };\n        fetch(window.Shopify.routes.root + \"cart/add.js\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        }).then(response => {\n          console.log(response.status, \"ok\"); // Check if the response is OK\n          if (response.status === 200) {\n            document.querySelector('.buy-now-popup.active').style.display = 'none';\n            document.querySelector('.buy-now-popup.active').classList.remove('active');\n            document.querySelector('body').style.overflow = 'auto';\n            updatePlaceholders();\n            getCartItemCount();\n          }\n          if (response.status === 200 && checkout) {\n            window.location.href = '/checkout';\n          }\n          return response.json();\n        }).catch(error => {\n          console.error(\"Error:\", error);\n        });\n      });\n    });\n  });\n});\nlet gridImages = document.querySelectorAll('.js-grid-image');\ngridImages.forEach(gridImage => {\n  gridImage.addEventListener('click', e => {\n    let _this = gridImage;\n    let imageQty = _this.getAttribute('data-image-qty');\n    let ttquantity = gridImage.parentNode.parentNode.querySelector('.quantity__input');\n    let buyMore = gridImage.parentNode.parentNode.querySelector('.js-buy-more');\n    let atc = gridImage.parentNode.parentNode.parentNode.parentNode.querySelector('.js-atc-bf');\n    atc.setAttribute('data-quantity', imageQty);\n    gridImage.parentNode.parentNode.querySelector('.quantity__button').classList.remove('disabled');\n    ttquantity.value = imageQty;\n    if (imageQty < 1 && buyMore) {\n      imageQty = 1;\n    }\n    if (imageQty < 4 && buyMore) {\n      buyMore.textContent = 'Add 4 save 55%%';\n      buyMore.setAttribute('data-count', 4);\n      buyMore.classList.remove('hidden');\n    }\n    if (imageQty >= 4 && imageQty < 6 && buyMore) {\n      buyMore.textContent = 'Add 6 save 65%';\n      buyMore.setAttribute('data-count', 6);\n      buyMore.classList.remove('hidden');\n    }\n    if (imageQty >= 6 && buyMore) {\n      buyMore.textContent = 'Add 10 save 80%';\n      buyMore.setAttribute('data-count', 10);\n      buyMore.classList.remove('hidden');\n    }\n    if (imageQty < 10 && buyMore) {\n      buyMore.classList.remove('hidden');\n    }\n    if (imageQty >= 10 && buyMore) {\n      buyMore.classList.add('hidden');\n    }\n  });\n});\nfunction initializeStickyTrackingBar() {\n  const trackingBar = document.querySelector('[data-tracking-bar]');\n  const headerBar = document.querySelector('.header-wrapper');\n  const stickyClass = 'sticky-bar';\n  const stickyHeaderClass = 'sticky-header';\n  function handleStickyBehavior() {\n    const scrollPosition = window.scrollY; // Current vertical scroll position\n    const viewportHeight = window.innerHeight; // Viewport height\n\n    if (scrollPosition > 40 || viewportHeight < 40) {\n      if (trackingBar) {\n        trackingBar.classList.add(stickyClass);\n        if (headerBar) headerBar.classList.add(stickyHeaderClass);\n      }\n    } else {\n      if (trackingBar) {\n        trackingBar.classList.remove(stickyClass);\n        if (headerBar) headerBar.classList.remove(stickyHeaderClass);\n      }\n    }\n  }\n\n  // Attach scroll and resize event listeners\n  window.addEventListener('scroll', handleStickyBehavior);\n  window.addEventListener('resize', handleStickyBehavior);\n\n  // Initial check\n  handleStickyBehavior();\n}\ninitializeStickyTrackingBar();\n$('html').addClass('hide-drawer');\nsetTimeout(() => {\n  let closeRebuy = document.querySelector('.rebuy-cart__flyout-close');\n  console.log(closeRebuy, 'closeRebuy');\n  closeRebuy.addEventListener('click', () => {\n    $('html').addClass('hide-drawer');\n    Rebuy.SmartCart.hide();\n  });\n}, 4000);\nlet openRebuys = document.querySelectorAll('.js-rebuy');\nconsole.log(openRebuys, 'openRebuy');\nopenRebuys.forEach(openRebuy => {\n  openRebuy.addEventListener('click', () => {\n    $('html').removeClass('hide-drawer');\n    Rebuy.SmartCart.show();\n  });\n});\nconst targetDiv = document.querySelector('.sticky-card-wrap'); // The div to which the class will be added\nconst triggerDiv = document.querySelector('.section-collections-with-nav'); // The div being monitored\nconst customClass = 'show-cart'; // The class to add to the target div\n\nif (targetDiv && triggerDiv) {\n  const triggerOffset = triggerDiv.offsetTop + triggerDiv.offsetHeight; // Calculate when the trigger has fully passed\n\n  const handleScroll = () => {\n    const scrollPosition = window.scrollY + window.innerHeight;\n    if (scrollPosition >= triggerOffset) {\n      // If the trigger div has fully passed\n      targetDiv.classList.add(customClass);\n    } else if (window.scrollY < triggerDiv.offsetTop) {\n      // If scrolling back above the trigger div\n      targetDiv.classList.remove(customClass);\n    }\n  };\n\n  // Listen for scroll events\n  window.addEventListener('scroll', handleScroll);\n\n  // Initial check in case the page is already scrolled\n  handleScroll();\n} else {\n  console.warn('Target or trigger element not found.');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/bf/bf.js\n");

/***/ }),

/***/ "./src/scripts/entries/section/bf.js":
/*!*******************************************!*\
  !*** ./src/scripts/entries/section/bf.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lib_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib/components */ \"./src/scripts/lib/components.js\");\n/* harmony import */ var modules_bf_bf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! modules/bf/bf.js */ \"./src/modules/bf/bf.js\");\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  (0,lib_components__WEBPACK_IMPORTED_MODULE_0__.initComponent)(modules_bf_bf_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], 'Bf');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9lbnRyaWVzL3NlY3Rpb24vYmYuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Nob3BpZnktYmFzZS0yLjAvLi9zcmMvc2NyaXB0cy9lbnRyaWVzL3NlY3Rpb24vYmYuanM/ZTUyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0Q29tcG9uZW50IH0gZnJvbSAnbGliL2NvbXBvbmVudHMnXG5pbXBvcnQgQmYgZnJvbSAnbW9kdWxlcy9iZi9iZi5qcydcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgaW5pdENvbXBvbmVudChCZiwgJ0JmJylcbn0pXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/entries/section/bf.js\n");

/***/ }),

/***/ "./src/modules/bf/bf.css":
/*!*******************************!*\
  !*** ./src/modules/bf/bf.css ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9iZi9iZi5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2hvcGlmeS1iYXNlLTIuMC8uL3NyYy9tb2R1bGVzL2JmL2JmLmNzcz8yYzFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/modules/bf/bf.css\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["commons"], function() { return __webpack_exec__("./src/scripts/entries/section/bf.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);